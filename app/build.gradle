apply plugin: 'com.android.application'


def appPropertiesFile = rootProject.file("app.properties");
def appProperties = new Properties()
appProperties.load(new FileInputStream(appPropertiesFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.adupdate.sed_report_demo"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        config {
            storeFile file("../keystore.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }
    buildTypes {
        debug{
            buildConfigField("String","httpUrl",appProperties['httpUrl'])
            buildConfigField("String","logReportUrl",appProperties['logReportUrl'])
            buildConfigField("String","mqttUrl",appProperties['mqttUrl'])
            buildConfigField("String","productId",appProperties['productId'])
            buildConfigField("String","productSecret",appProperties['productSecret'])
            buildConfigField("int","mqttPort",appProperties['mqttPort'])
            buildConfigField("boolean","isDebug","true")
        }
        release {
            buildConfigField("String","httpUrl",appProperties['httpUrl'])
            buildConfigField("String","logReportUrl",appProperties['logReportUrl'])
            buildConfigField("String","mqttUrl",appProperties['mqttUrl'])
            buildConfigField("String","productId",appProperties['productId'])
            buildConfigField("String","productSecret",appProperties['productSecret'])
            buildConfigField("int","mqttPort",appProperties['mqttPort'])
            buildConfigField("boolean","isDebug","false")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-rc01'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //mqtt
    implementation 'com.adups.iot:mqtt_libs:1.1.3'

    // Room
    implementation "android.arch.persistence.room:runtime:1.0.0"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"

    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.7.0'
    implementation 'com.squareup.okio:okio:1.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.7.0'
    //gson
    implementation 'com.google.code.gson:gson:2.8.0'
    //retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.2.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    //rxJava
    implementation'io.reactivex.rxjava2:rxjava:2.0.1'
    implementation'io.reactivex.rxjava2:rxandroid:2.0.1'

    //ButterKnife
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'com.jakewharton:butterknife-annotations:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    //dagger.android
    implementation 'com.google.dagger:dagger-android:2.11'
    implementation 'com.google.dagger:dagger-android-support:2.11'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.11'
    //dagger2
    implementation 'com.google.dagger:dagger:2.11-rc2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11-rc2'

    //aop编程
    implementation 'org.aspectj:aspectjrt:1.8.9'

}

//aop编程
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}